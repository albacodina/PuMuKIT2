{% extends 'PumukitNewAdminBundle::layout.html.twig' %}

{% block body %}
    <div class="col-md-2">
        <div class="well">
            {% render(controller('PumukitNewAdminBundle:UNESCO:menuTags')) %}
        </div>
    </div>
    <div class="col-md-8">
        <div id="advance_search">
            {% render(controller('PumukitNewAdminBundle:UNESCO:advanceSearchForm')) %}
        </div>
        <div id="list_mms">
            {% render(controller('PumukitNewAdminBundle:UNESCO:list')) %}
        </div>
        <div id="edit_mms">
            {% if(app.session.has('admin/unesco/id')) %}
                {{ render(url('pumukit_new_admin_unesco_edit', {'id': app.session.get('admin/unesco/id')})) }}
            {% endif %}
        </div>
    </div>
    <div class="col-md-2">
        <div id="preview_mms">
            {% if app.session.has('admin/unesco/id') %}
                {% render(controller('PumukitNewAdminBundle:UNESCO:show', {'id' : app.session.get('admin/unesco/id')})) %}
            {% else %}
                {% render(controller('PumukitNewAdminBundle:UNESCO:show')) %}
            {% endif %}
        </div>
    </div>

    <div class="modal fade" id="myAuxModal" tabindex="-1" role="dialog" aria-labelledby="myAuxModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
            </div>
        </div>
    </div>

    <script type="text/javascript">
        var url = "{{ path('pumukit_schema_apikeywords_mmobj', {'_format':'json'})|raw }}";
        window.mmobjkeywords = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.obj.whitespace('_id'),
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            prefetch: {
                url: url,
                ttl: 1800000
            }
        });

        window.mmobjkeywords.initialize();

        var url = "{{ path('pumukit_schema_apikeywords_series', {'_format':'json'})|raw }}";
        window.serieskeywords = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.obj.whitespace('_id'),
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            prefetch: {
                url: url,
                ttl: 1800000
            }
        });

        window.serieskeywords.initialize();


        $(function() {

            var dragSrcEl = null;

            function handleDragStart(e) {
                this.style.opacity = '0.4';  // this / e.target is the source node.
                dragSrcEl = this;

                e.dataTransfer.effectAllowed = 'move';
                e.dataTransfer.setData('text/html', this.innerHTML);

            }

            function handleDragOver(e) {
                if (e.preventDefault) {
                    e.preventDefault(); // Necessary. Allows us to drop.
                }
                e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.

                return false;
            }

            function handleDragEnter(e) {
                // this / e.target is the current hover target.
                this.classList.add('over');
            }

            function handleDragLeave(e) {
                this.classList.remove('over');  // this / e.target is previous target element.
            }

            function handleDrop(e) {
                // this / e.target is current target element.

                if (e.stopPropagation) {
                    e.stopPropagation(); // stops the browser from redirecting.
                }

                // Don't do anything if dropping the same column we're dragging.
                if (dragSrcEl != this) {
                    // Set the source column's HTML to the HTML of the columnwe dropped on.
                    console.log(e.dataTransfer);
                    //dragSrcEl.innerHTML = this.innerHTML;
                    //this.innerHTML = e.dataTransfer.getData('text/html');
                }

                return false;
            }

            function handleDragEnd(e) {
                // this/e.target is the source node.

                [].forEach.call(cols, function (col) {
                    col.classList.remove('over');
                });
            }

            var cols = document.querySelectorAll('.list_unesco');
            [].forEach.call(cols, function(col) {
                col.addEventListener('dragstart', handleDragStart, false);
                col.addEventListener('dragenter', handleDragEnter, false);
                col.addEventListener('dragover', handleDragOver, false);
                col.addEventListener('dragleave', handleDragLeave, false);
                col.addEventListener('drop', handleDrop, false);
                col.addEventListener('dragend', handleDragEnd, false);
            });

        });
    </script>
{% endblock %}